<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanEncryptionLibrary</name>
    </assembly>
    <members>
        <member name="F:KellermanSoftware.EncryptionLibrary.BlowfishTransform.MAX_KEY_LENGTH">
            <summary>
              Maximum (and recommended) key size in bytes.
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.BlowfishTransform.BLOCK_SIZE">
            <summary>
              Block size in bytes.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlowfishTransform.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Resets the instance with a key material. Allows the switch of
              keys at runtime without any object allocation.
            </summary>
            <param name="key"> 
              Buffer with the (binary) key material.
            </param>
            <param name="nOfs"> 
              Position at which the key material starts in the buffer.
            </param>
            <param name="nLen"> 
              Size of the key material (up to MAX_KEY_LENGTH bytes).
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlowfishTransform.EncryptBlock(System.UInt32,System.UInt32,System.UInt32@,System.UInt32@)">
            <see cref="!:BlowfishECB.EncryptBlock"/>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlowfishTransform.DecryptBlock(System.UInt32,System.UInt32,System.UInt32@,System.UInt32@)">
            <see cref="!:BlowfishECB.DecryptBlock"/>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlowfishTransform.Encrypt(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <see cref="!:BlowfishECB.Encrypt"/>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlowfishTransform.Decrypt(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <see cref="!:BlowfishECB.Decrypt"/>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.BlowfishTransform.IsWeakKey">
            <summary>
            To check if the key used is weak, which means that eventually
            an attack is easier to apply than simple brute force on keys;
            due to the randomness such a case is very unlikely to happen.
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.RIPEMD320">
            <summary>Computes the RIPEMD320 hash for the input data using the managed library.</summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm">
            <summary>Represents the abstract class from which all implementations of the Classless.Hasher.BlockHashAlgorithm inherit.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.#ctor(System.Int32)">
            <summary>Initializes a new instance of the BlockHashAlgorithm class.</summary>
            <param name="blockSize">The size in bytes of an individual block.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.Initialize">
            <summary>Initializes the algorithm.</summary>
            <remarks>If this function is overriden in a derived class, the new function should call back to
            this function or you could risk garbage being carried over from one calculation to the next.</remarks>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Performs the hash algorithm on the data provided.</summary>
            <param name="array">The array containing the data.</param>
            <param name="ibStart">The position in the array to begin reading from.</param>
            <param name="cbSize">How many bytes in the array to read.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.HashFinal">
            <summary>Performs any final activities required by the hash algorithm.</summary>
            <returns>The final hash value.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.BlockSize">
            <summary>The size in bytes of an individual block.</summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.BufferCount">
            <summary>The number of bytes currently in the buffer waiting to be processed.</summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.BlockHashAlgorithm.Count">
            <summary>The number of bytes that have been processed.</summary>
            <remarks>This number does NOT include the bytes that are waiting in the buffer.</remarks>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.RIPEMD320.#ctor">
            <summary>Initializes a new instance of the RIPEMD320 class.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.RIPEMD320.Initialize">
            <summary>Initializes the algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.RIPEMD320.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.RIPEMD320.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.USDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.USDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables(System.String)">
            <summary>
            A bunch of variable initialization
            </summary>
            <param name="productCode"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.WipeStartPassword(System.String)">
            <summary>
            Start the trial based for testing purposes
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.KeysHacked">
            <summary>
            Make sure all the dates are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.KeysDifferent">
            <summary>
            Somehow the keys don't match between the registry and ini file
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromINI(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromRegistry(System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndINI(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistry(System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToINIFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GenerateLicense">
            <summary>
            Generate the license for the product
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GenerateTrialExtension">
            <summary>
            Generate a trial extension key
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.DefaultString(System.String,System.String)">
            <summary>
            Return a string padded with default characters
            </summary>
            <param name="sOriginal"></param>
            <param name="sDefault"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.RandomSection(System.String,System.String)">
            <summary>
            Random characters with the random checksum
            </summary>
            <param name="sProductCode"></param>
            <param name="sSerial"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.LastSection(System.String,System.String)">
            <summary>
            The last section that has a ton of name checking
            </summary>
            <param name="sFirstName"></param>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeXOR(System.String,System.Int32,System.Int32)">
            <summary>
            Return a special subtraction XOR
            </summary>
            <param name="sSentence"></param>
            <param name="iPosition"></param>
            <param name="iSubtract"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.MiddleSection(System.String,System.String)">
            <summary>
            The section after the version section
            </summary>
            <param name="sFirstName"></param>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.VersionSection(System.String)">
            <summary>
            Get the version, random characters, and the last name
            </summary>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NamePart(System.String,System.String)">
            <summary>
            Get the name portion of the license key
            </summary>
            <param name="sFirstName"></param>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Left(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">String to parse</param>
            <param name="iLength">Left Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeChar(System.String)">
            <summary>
            Return either a letter or a number
            </summary>
            <param name="sString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeChecksum(System.String)">
            <summary>
            Get a checksum, altering checksums that could be confused with each other
            </summary>
            <param name="sString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetChecksum(System.String)">
            <summary>
            Get the checksum for a specified string.
            Valid checksum digits are 0-9,A-Z (others are ignored)
            </summary>
            <param name="sDigits">The string to parse</param>
            <returns>The checksum for the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.Char)">
            <summary>
            Get the ASCII value for the character.
            </summary>
            <param name="cInChar">The character to look at.</param>
            <returns>ASCII value of the passed character.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeRandomChar(System.Int32)">
            <summary>
            Generate a Random Character, excluding characters that could be confused with each other
            </summary>
            <param name="iBase"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.RandomChar(System.Int32)">
            <summary>
            Get a Random Character specified by iBase.
            iBase can be 10, 16, or 36.
            </summary>
            <param name="iBase">Base of the random character</param>
            <returns>A single random character string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.IsDate(System.String)">
            <summary>
            Checks to see if the passed string can be converted to a US date.
            </summary>
            <param name="dateString">The string to parse.</param>
            <returns>True if the string is a date.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Chr(System.Int32)">
            <summary>
            Get a string based on the specified ASCII code
            </summary>
            <param name="iASCIICode">ASCII Code</param>
            <returns>A Single Character String</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.Utilities">
            <summary>A container of static utility functions.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Utilities.#ctor">
            <summary>Prevent the compiler from making an unneeded default public constructor.</summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.HAVALParameters">
            <summary>A class that contains the parameters necessary to initialize a HAVAL algorithm.</summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.HashAlgorithmParameters">
            <summary>An abstract class that represents the parameters necessary to initialize a hashing algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.HAVALParameters.#ctor(System.Int16,System.Int16)">
            <summary>Initializes a new instance of the HAVALParamters class.</summary>
            <param name="passes">How many transformation passes to do.</param>
            <param name="length">The bit length of the final hash.</param>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.HAVALParameters.Passes">
            <summary>Gets or sets the number of passes.</summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.HAVALParameters.Length">
            <summary>Gets or sets the bit length.</summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.HAVAL">
            <summary>Computes the HAVAL hash for the input data using the managed library.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.HAVAL.#ctor(KellermanSoftware.EncryptionLibrary.HAVALParameters)">
            <summary>Initializes a new instance of the HAVAL class.</summary>
            <param name="param">The parameters to utilize in the HAVAL calculation.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.HAVAL.Initialize">
            <summary>Initializes the algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.HAVAL.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.HAVAL.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.SymetricEncryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.SymetricEncryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.SymetricEncryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.SymetricEncryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.SymetricEncryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.SymetricEncryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.InitializeAlgorithm(KellermanSoftware.EncryptionLibrary.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Encrypt(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.Byte[])">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Encrypt(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Encrypt(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Decrypt(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.Byte[])">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Decrypt(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Decrypt(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.SymetricEncryption.EncodingMethod">
            <summary>
            Set the encoding method used for converting strings into bytes.  The default is UTF8
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.SymetricEncryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.Adler32">
            <summary>
            Adler file checksum
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.Adler32.BASE">
            <summary>
            Prime number before 65536
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Adler32.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Adler32.Reset">
            <summary>
            Default checksum to 1
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Adler32.GetFileAdler32(System.String)">
            <summary>
            Get the Adler32 Checksum for a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Adler32.Process(System.Int32)">
            <summary>
            Combine the passed value with the current checksum
            </summary>
            <param name="value">
            The value to add to the checksum
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Adler32.Process(System.Byte[])">
            <summary>
            Get the checksum of the passed bytes
            </summary>
            <param name="buffer">
            Array to process
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Adler32.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate the checksum of the passed bytes
            </summary>
            <param name="buffer">
            Byte array
            </param>
            <param name="start">
            The initial byte to process
            </param>
            <param name="length">
            Length of bytes to process
            </param>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Adler32.Checksum">
            <summary>
            Adler32 Checksum
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.TwofishEncryption">
            <summary>
            Summary description for TwofishEncryption.
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.TwofishBase">
            <summary>
            Summary description for TwofishBase.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.TwofishEncryption.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transform a block depending on whether we are encrypting or decrypting
            </summary>
            <param name="inputBuffer"></param>
            <param name="inputOffset"></param>
            <param name="inputCount"></param>
            <param name="outputBuffer"></param>
            <param name="outputOffset"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="Section">Section Name</param>
            <param name="Key">Key Name</param>
            <param name="Value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="Section">Section Name</param>
            <param name="Key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.CertificateStatus">
            <summary>
            Indicates if the certificate is expired Untrusted or Trusted
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.PublicKeyEncryption.ValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Checks the status of a certificate, whether it is: expired, untrusted, or trusted
            </summary>
            <param name="cert">Certificate to check</param>
            <returns>The status of the certificate</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.PublicKeyEncryption.EncryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypt a file with an X509 Certificate
            </summary>
            <param name="inPath">The full path of the file to encrypt</param>
            <param name="outPath">The full path to the output file</param>
            <param name="cert">Public certificate to retreive the public key from</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.PublicKeyEncryption.DecryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypt a file that was encrypted with a X509 certificate
            </summary>
            <param name="inPath">The full path of the file to decrypt</param>
            <param name="outPath">The full path to the output file</param>
            <param name="cert">The PFX certificate that corresponds to the X509 certificate</param>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.CRC32">
            <summary>
            CRC32 calculation
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.#ctor">
            <summary>
            Default constructor, initializes object to the default state
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.GetFileCRC32(System.String)">
            <summary>
            Get the CRC for a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Reset">
            <summary>
            Resets object to the default state
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Process(System.Byte)">
            <summary>
            Updates current value with byte
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates current CRC value with byte array
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.CRC32.Value">
            <summary>
            Get/Set current CRC value
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.XOR">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.GOSTHash">
            <summary>Computes the GOSTHash hash for the input data using the managed library.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.GOSTHash.#ctor">
            <summary>Initializes a new instance of the GOSTHash class.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.GOSTHash.#cctor">
            <summary>Initializes the substitution boxes.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.GOSTHash.Initialize">
            <summary>Initializes the algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.GOSTHash.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.GOSTHash.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.HashProvider">
            <summary>
            Hashing Algorithms
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.EncryptionLibrary.HashProvider,System.Byte[])">
            <summary>
            Compute a hash without a salt
            </summary>
            <param name="hashType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Hashing.ComputeHashSalt(KellermanSoftware.EncryptionLibrary.HashProvider,System.Byte[],System.String)">
            <summary>
            Compute a hash with a salt
            </summary>
            <param name="hashType"></param>
            <param name="input"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.EncryptionLibrary.HashProvider,System.IO.MemoryStream)">
            <summary>
            Hash a memory stream
            </summary>
            <param name="hashType"></param>
            <param name="memStream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.EncryptionLibrary.HashProvider,System.String,System.String)">
            <summary>
            Hash a file
            </summary>
            <param name="hashType"></param>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.EncryptionLibrary.HashProvider,System.String,System.String,System.String)">
            <summary>
            Compute a file hash with a salt
            </summary>
            <param name="hashType"></param>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Hashing.EncodingMethod">
            <summary>
            Set the encoding method used for converting strings into bytes.  The default is UTF8
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.u">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.u.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.u.GetCurrentDirectory">
            <summary>
            Get the current directory of the executing assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.u.PathSlash(System.String)">
            <summary>
            Ensure the passed string ends with a directory seperator character unless the string is blank.
            </summary>
            <param name="path">The string to append the backslash to.</param>
            <returns>String with a "/" on the end</returns>
        </member>
        <member name="M:KellermanSoftware.Common.u.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.Twofish">
            <summary>
            Summary description for Twofish encryption algorithm of which more information can be found at http://www.counterpane.com/twofish.html. 
            This is based on the MS cryptographic framework and can therefore be used in place of the RijndaelManaged classes
            provided by MS in System.Security.Cryptography and the other related classes
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Twofish.#ctor">
            <summary>
            This is the Twofish constructor.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Twofish.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates an object that supports ICryptoTransform that can be used to encrypt data using the Twofish encryption algorithm.
            </summary>
            <param name="key">A byte array that contains a key. The length of this key should be equal to the KeySize property</param>
            <param name="iv">A byte array that contains an initialization vector. The length of this IV should be equal to the BlockSize property</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Twofish.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates an object that supports ICryptoTransform that can be used to decrypt data using the Twofish encryption algorithm.
            </summary>
            <param name="key">A byte array that contains a key. The length of this key should be equal to the KeySize property</param>
            <param name="iv">A byte array that contains an initialization vector. The length of this IV should be equal to the BlockSize property</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Twofish.GenerateIV">
            <summary>
            Generates a random initialization Vector (IV). 
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Twofish.GenerateKey">
            <summary>
            Generates a random Key. This is only really useful in testing scenarios.
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Twofish.Mode">
            <summary>
            Override the Set method on this property so that we only support CBC and EBC
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.QuotedPrintable">
            <summary>
            Encode a string into quoted printable
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.GZipCompressMemoryStream(System.IO.Compression.CompressionMode,System.IO.MemoryStream)">
            <summary>
            Compress a memory stream with Gzip
            </summary>
            <param name="mode"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.DeflateCompressMemoryStream(System.IO.Compression.CompressionMode,System.IO.MemoryStream)">
            <summary>
            Compress a memory stream with deflate
            </summary>
            <param name="mode"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.DeflateDecompressMemoryStream(System.IO.MemoryStream)">
            <summary>
            Decompress a Memory stream compress with Deflate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.GZipDecompressMemoryStream(System.IO.MemoryStream)">
            <summary>
            Decompress a Memory stream compress with GZip
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.GZipCompressStream(System.IO.Stream)">
            <summary>
            Compress a stream using Gzip
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.DeflateCompressStream(System.IO.Stream)">
            <summary>
            Compress a stream using Deflate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.DeflateDecompressStream(System.IO.Stream)">
            <summary>
            Decompress a stream compress with Deflate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.GZipDecompressStream(System.IO.Stream)">
            <summary>
            Decompress a stream compress with GZip
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.DeflateCompressFile(System.String,System.String)">
            <summary>
            Compress a file with the deflate algorithim
            </summary>
            <param name="mode"></param>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.GZipCompressFile(System.String,System.String)">
            <summary>
            Compress a file with the GZip algorithim
            </summary>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.GZipDecompressFile(System.String,System.String)">
            <summary>
            Decompress a file using Gzip Algorithm
            </summary>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Compression.DeflateDecompressFile(System.String,System.String)">
            <summary>
            Decompress a file using Deflate Algorithm
            </summary>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.EndianType">
            <summary>The order in which to store the bytes for integers.</summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.EndianType.LittleEndian">
            <summary>The Least Significant Byte is first.</summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.EndianType.BigEndian">
            <summary>The Most Significant Byte is first.</summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.Encryption">
            <summary>
            Powerful and Easy to use Encryption Library by Kellerman Software
            </summary>
        </member>
        <member name="F:KellermanSoftware.EncryptionLibrary.Encryption.r">
            <summary>
            Used to create random strings
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.#ctor(System.String,System.String)">
            <summary>
            Constructor for licensed verson
            </summary>
            <param name="userName"></param>
            <param name="licenseKey"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.#ctor">
            <summary>
            Constructor for 30 day trial
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.CheckLicense(System.String,System.String)">
            <summary>
            The variables below are specific to the licensing component
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.BytesToQuotedPrintable(System.Byte[])">
            <summary>
            Encode bytes to a quoted printable string
            </summary>
            <param name="bytes">The bytes to encode</param>
            <returns>Quoted Printable String OR string.emtpy on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.BytesToHexString(System.Byte[])">
            <summary>
            Encode bytes to a hex encoded string
            </summary>
            <param name="bytes">The bytes to encode</param>
            <returns>Hex formatted string OR String.empty on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.EncodeBase64(System.Byte[])">
            <summary>
            Encode bytes with Base64
            </summary>
            <param name="input">Bytes to encode</param>
            <returns>Base64 string OR string.emtpy on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecodeBase64(System.String)">
            <summary>
            Decode a string that is Base64 encoded
            </summary>
            <param name="input">The string to decode</param>
            <returns>The decoded bytes OR null on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.uuEncode(System.String)">
            <summary>
            Encode a string using uuEncode
            </summary>
            <param name="input">String to encode</param>
            <returns>uuEncoded string or string.empty on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.uuDecode(System.String)">
            <summary>
            Decode a uuEncoded string
            </summary>
            <param name="input">uuEncoded string to decode</param>
            <returns>Decoded string OR string.empty on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.HashString(KellermanSoftware.EncryptionLibrary.HashProvider,System.String)">
            <summary>
            Return a Base64 encoded one way hash of a string
            </summary>
            <param name="hashType">The hash algorithm to use</param>
            <param name="input">The string to hash</param>
            <returns>Hashed string OR string.empty on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.HashBytes(KellermanSoftware.EncryptionLibrary.HashProvider,System.Byte[])">
            <summary>
            Hash bytes
            </summary>
            <param name="hashType">The hash algorithm to use</param>
            <param name="input">The bytes to hash</param>
            <returns>The hashed bytes OR null on error</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.HashFile(KellermanSoftware.EncryptionLibrary.HashProvider,System.String,System.String)">
            <summary>
            Hash a file using the specified hash provider
            </summary>
            <param name="hashType">The hash algorithm to use</param>
            <param name="inputFilePath">The file to hash</param>
            <param name="outputFilePath">The hash results</param>
            <returns>True on success</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.EncryptString(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypt and return a base64 encoded string
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The string to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.EncryptBytes(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.Byte[])">
            <summary>
            Encrypt bytes using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The bytes to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.EncryptMemoryStream(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.IO.MemoryStream)">
            <summary>
            Encrypt the memory stream using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="stream">The memory stream to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.EncryptFile(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.String,System.String)">
            <summary>
            Encrypt a text or binary file using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputFilePath">The file to encrypt</param>
            <param name="outputFilePath">The output encrypted file</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecryptString(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypt a base 64 encoded string
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The string to decrypt</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecryptBytes(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.Byte[])">
            <summary>
            Decrypt bytes using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The bytes to decrypt</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecryptMemoryStream(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.IO.MemoryStream)">
            <summary>
            Decrypt the memory stream using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="stream">The stream to decrypt</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecryptFile(KellermanSoftware.EncryptionLibrary.EncryptionProvider,System.String,System.String,System.String)">
            <summary>
            Decrypt a text or binary file using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputFilePath">The encrypted file</param>
            <param name="outputFilePath">The output decrypted file</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GenerateSixDigitPin(System.String)">
            <summary>
            Generate a six digit PIN based on a string.  Uses CRC32 as a basis. Always generates 6 digits.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GetStringAdler32(System.String)">
            <summary>
            Get the Adler 32 Checksum for a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GetFileAdler32(System.String)">
            <summary>
            Get an Adler 32 Checksum for a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GetStringCRC32(System.String)">
            <summary>
            Get the CRC 32 for a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GetFileCRC32(System.String)">
            <summary>
            Get a 32 bit Cyclic Redundency Check for a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GenerateKey">
            <summary>
            Generate a cryptograpically strong random string to use as a key, salt, or initialization vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.Random256">
            <summary>
            Return a string of 256 random visible characters to be used 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.SecureDirectoryErase(System.String)">
            <summary>
            Securely erase all files and sub directories within a directory
            </summary>
            <param name="directoryPath">The directory to erase</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.SecureDirectoryErase(System.String,System.String)">
            <summary>
            Securely erase files within a directory and sub directories according to the search pattern
            </summary>
            <param name="directoryPath">The directory to erase</param>
            <param name="searchPattern">File wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.SecureDirectoryErase(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Securely erase files within a directory and sub directories according to the search pattern
            </summary>
            <param name="directoryPath"></param>
            <param name="searchPattern">File wildcard pattern</param>
            <param name="searchOption">Recurse into sub directories</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GetRandomBytes(System.Int32)">
            <summary>
            Produce an array of random characters
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.SecureFileErase(System.String)">
            <summary>
            Securely delete a file by overwriting with random bytes, renaming and then deleting it
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType,System.Byte[])">
            <summary>
            Compress the passed bytes using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType,System.Byte[])">
            <summary>
            Decompress the passed bytes using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.CompressStream(KellermanSoftware.EncryptionLibrary.CompressionType,System.IO.Stream)">
            <summary>
            Compress a stream using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecompressStream(KellermanSoftware.EncryptionLibrary.CompressionType,System.IO.Stream)">
            <summary>
            Decompress a stream using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType,System.String,System.String)">
            <summary>
            Compress a file using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecompressFile(KellermanSoftware.EncryptionLibrary.CompressionType,System.String,System.String)">
            <summary>
            Decompress a file using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.ValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Checks the status of a certificate, whether it is: expired, untrusted, or trusted
            </summary>
            <param name="cert">Certificate to check</param>
            <returns>The status of the certificate</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.EncryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypt a file with an X509 Certificate
            </summary>
            <param name="inputFilePath">The full path of the file to encrypt</param>
            <param name="outputFilePath">The full path to the output file</param>
            <param name="cert">Public certificate to retreive the public key from</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.DecryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypt a file that was encrypted with a X509 certificate
            </summary>
            <param name="inputFilePath">The full path of the file to decrypt</param>
            <param name="outputFilePath">The full path to the output file</param>
            <param name="cert">The PFX certificate that corresponds to the X509 certificate</param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.GetRandomString(System.Int32)">
            <summary>
            Get a random string of the length specified by iLength
            </summary>
            <param name="iLength">Number of characters to generate</param>
            <returns>A Random String</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.RandomChar(System.Int32)">
            <summary>
            Get a Random Character specified by iBase.
            iBase can be 10, 16, or 36.
            </summary>
            <param name="iBase">Base of the random character</param>
            <returns>A single random character string</returns>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.Encryption.Chr(System.Int32)">
            <summary>
            Get a string based on the specified ASCII code
            </summary>
            <param name="iASCIICode">ASCII Code</param>
            <returns>A Single Character String</returns>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Encryption.CipherMethod">
            <summary>
            Support CBC or ECB Cipher Modes for Rijandael or Twofish.  The default is CBC (reccommended)
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Encryption.EncodingMethod">
            <summary>
            Set the encoding method used for converting unicode strings into bytes.  The default is UTF8
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Encryption.Salt">
            <summary>
            Salt for Hashing and Encryption
            </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.Encryption.InitializationVector">
            <summary>
            Initialization Vector for Encryption
            </summary>
        </member>
    </members>
</doc>
